* Define function to print Hello World to stdout then call it
#+BEGIN_SRC clojure
(defn hello-world []
  (prn "Hello World"))

(hello-world)
#+END_SRC

#+BEGIN_SRC janet
(defn hello-world []
  (pp "Hello World"))

(hello-world)
#+END_SRC

#+BEGIN_SRC c
#include <stdio.h>

void hello_world ()
{
  printf ("Hello World");
}

hello_world ();
#+END_SRC

#+BEGIN_SRC js
function helloWorld () {
  console.log("Hello World")
}

helloWorld ()
#+END_SRC

#+BEGIN_SRC lisp
(defun hello-world ()
  (prin1 "Hello World"))

(hello-world)
#+END_SRC

#+BEGIN_SRC erlang
-module(hw).

hello_world() ->
  io:format("Hello World").

hw:hello_world().
#+END_SRC

* Define or alias to function to add two numbers then call on 1, 2 storing in x
#+BEGIN_SRC clojure
(def sum +)

(def x (sum 1 2))
#+END_SRC

#+BEGIN_SRC janet
(def sum +)

(def x (sum 1 2))
#+END_SRC

#+BEGIN_SRC c
int sum (int a, int b) { return a + b; }

int x = sum (1, 2);
#+END_SRC

#+BEGIN_SRC js
function sum (a, b) { return a + b; }

const x = sum (1, 2)
#+END_SRC

#+BEGIN_SRC lisp
(defun sum (a b) (+ a b))

(defvar x (sum 1 2))
#+END_SRC

#+BEGIN_SRC erlang
-module(y).
sum(A,B) -> A + B.

X = y:sum(1, 2).
#+END_SRC

* Define a function to read a file fn and store contents in x
#+BEGIN_SRC clojure
(def my-slurp slurp)

(def x (my-slurp "test.txt"))
#+END_SRC

#+BEGIN_SRC janet
(def my-slurp slurp)

(def x (my-slurp "test.txt"))
#+END_SRC

#+BEGIN_SRC c
char *
slurp (char *fn)
{
  FILE *fp;
  char *c;
  char *content = malloc (sizeof (char));
  char line[255];

  fp = fopen (fn, "r");

  while (NULL != (c = fgets (line, 255, fp)))
    {
      content = realloc (content, sizeof (char) * (strlen (c) + strlen (content)));
      strcat (content, c);
    }

  fclose (fp);

  return content;
}

char *x = slurp ("test.txt");
#+END_SRC

#+BEGIN_SRC js
const fs = require('fs')

function slurp (fn) {
  return fs.readFileSync(fn)
}

var x = slurp('test.txt')
#+END_SRC

#+BEGIN_SRC php
function slurp ($fn) {
  return file_get_contents($fn);
}

$x = slurp ('test.txt');
#+END_SRC

#+BEGIN_SRC lisp
(defun slurp (filename)
  "Read in FILENAME and return as a single string."
  (let ((lines
         (with-open-file
             (stream filename
                     :direction :input
                     :if-does-not-exist :error)
           (when stream
             (loop for line = (read-line stream nil 'eof)
                until (eq line 'eof)
                collect line)))))
    (format nil "~{~a~^~%~}" lines)))

(defvar x (slurp "test.txt"))
#+END_SRC
* Sum of all numbers from 0 to 9
#+BEGIN_SRC clojure
(reduce + (range 10))
#+END_SRC

#+BEGIN_SRC janet
(reduce + 0 (range 10))
#+END_SRC

#+BEGIN_SRC c
int i;
int sum = 0;

for (i = 0; i < 10; i++)
  {
    sum += i;
  }
#+END_SRC

#+BEGIN_SRC js
[...Array(10).keys()].reduce((acc, cur) => acc + cur)
#+END_SRC

#+BEGIN_SRC php
for (i = 0; i < 10; i++) {
  sum += i;
}
#+END_SRC

#+BEGIN_SRC erlang
lists:foldl(fun (N, Acc) -> N + Acc end, 0, lists:seq(0, 9)).
#+END_SRC

* End
#+BEGIN_EXPORT html
<style>
@charset "UTF-8";
@font-face {
  font-family: Iosevka;
  /* https://raw.githubusercontent.com/be5invis/Iosevka/master/LICENSE.md */
  src: url("attachments/iosevka-term-regular.woff") format("woff");
}

html {
  background:#fff;
  color:#333;
  font-family: sans-serif, serif;
  padding-bottom: 100px;
}

body {
  margin-left: 5%;
  margin-right: 5%;
}

pre {
  box-shadow: none;
  border: 2px solid red;
  color:#fff !important;
  display: inline-block;
}

pre span {
  background:transparent !important;
}

ul {
  color: #124;
  font-size: 1.2rem;
  padding-bottom: 10px;
  padding-top: 10px;
}

ul li {
  border-bottom: 1px dashed #069;
  display:list;
  font-size: .9em;
}

h2 {
  border-bottom: 4px solid #ddbb11;
  font-family:serif;
  font-weight:normal;
  margin-top:40px;
  padding:10px;
}
a {
  color:#069;
  font-weight:normal;
  margin-bottom:0px;
  padding:7px;
  padding-bottom:3px;
  padding-top:3px;
  text-decoration:none;
}
a:hover {
  border-bottom: 1px solid #af0;
}
.src {
  line-stroke: bold;
  border: 2px solid red;
  background:#111;
  border:1px solid #999;
  border-radius:3px;
  color:#fff;
  overflow-y:scroll;
  padding:10px;
  font-family: Iosevka, monospace;
}

img {
  max-width: 100%;
}

.cyborg {
  max-width: 20%;
}

/* If width is less than 600 do this stuff */
@media (max-width: 600px)
{
  html {
  }
  body {
    margin-left: 2%;
    margin-right: 2%;
  }
  .cyborg {
    display:none;
  }
  img {
    max-width: 100%;
  }
}

#change-lang {
  background: rgba(0, 0, 0, .95);
  bottom: 0;
  color: #fff;
  left: 0;
  padding: 10px;
  position: fixed;
  width: 100%;
}

blockquote {
  border: 0px;
  border-left: 25px solid #ccc;
  color: #999;
  font-family: serif;
  font-size: 2rem;
  font-style: italic;
  padding: 20px;
  text-align: justified;
}

.org-src-container {
  background: #333;
  display: inline-block;
  margin: 4px;
  padding: 2px;
}

.src-lbl {
  background: #000;
  border-radius: 30px;
  color: #fff;
  display: block;
  margin: auto;
  margin-top: -20px;
  padding-top: 3px;
  text-align: center;
  width: 50%;
}
</style>
<script>
function removeItalics() {
  const nodes = document.querySelectorAll('span')
  for (let i = 0; i < nodes.length; i++) {
    if (nodes[i].innerHTML === '(' ||
      nodes[i].innerHTML === ')' ||
      nodes[i].innerHTML === '[]' ||
      nodes[i].innerHTML === '()' ||
      nodes[i].innerHTML === '{}' ||
      nodes[i].innerHTML === '[' ||
      nodes[i].innerHTML === ']' ||
      nodes[i].innerHTML === '{' ||
      nodes[i].innerHTML === '}') {
      nodes[i].style.fontStyle = 'normal'
      nodes[i].style.fontWeight = 'normal'
      nodes[i].style.marginLeft = '2px'
      nodes[i].style.marginRight = '2px'
      nodes[i].style.opacity = '0.8'
    }
  }
}
function fancyPres () {
  const nodes = document.querySelectorAll('pre')
  for (let i = 0; i < nodes.length; i++) {
    const lang = nodes[i].className.toString().replace(/.*?-/, '')
    nodes[i].parentNode.innerHTML += '<div class="src-lbl">' + lang + '</div>'
  }
}
window.onload = () => {
  removeItalics()
  fancyPres()
}
</script>
#+END_EXPORT
